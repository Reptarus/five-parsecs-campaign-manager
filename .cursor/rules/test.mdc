---
description: Project rules and coding standards for the Five Parsecs Campaign Manager project, including file organization, coding standards, testing requirements, state management, UI/UX standards, version control, performance standards, and security guidelines.
globs: ["*.gd", "*.tscn", "*.tres", "*.res", "*.md", "*.json", "*.cfg", "*.import", "src/**/*", "tests/**/*", "assets/**/*", "docs/**/*"]
alwaysApply: false
---
description: Project rules and coding standards for the Five Parsecs Campaign Manager project, including file organization, coding standards, testing requirements, state management, UI/UX standards, version control, performance standards, and security guidelines.
globs: ["*.gd", "*.tscn", "*.tres", "*.res", "*.md", "*.json", "*.cfg", "*.import", "src/**/*", "tests/**/*", "assets/**/*", "docs/**/*"]
---

# Five Parsecs Campaign Manager - Project Rules

## File Organization

### Directory Structure
- **Source Code Structure**:
  - `src/core/`: Core systems and foundational code
  - `src/base/`: Base classes and abstractions
  - `src/game/`: Game-specific implementations
    - `src/game/campaign/`: Campaign-related functionality
    - `src/game/combat/`: Combat systems
    - `src/game/character/`: Character management
    - `src/game/ships/`: Ship management systems
    - `src/game/mission/`: Mission logic and structures
    - `src/game/state/`: Game state management
    - `src/game/items/`: Item implementations
    - `src/game/world/`: World generation and management
    - `src/game/economy/`: Economic systems
    - `src/game/terrain/`: Terrain generation and management
    - `src/game/enemy/`: Enemy AI and management
    - `src/game/tutorial/`: Tutorial systems
    - `src/game/story/`: Story/narrative management
    - `src/game/victory/`: Victory conditions and tracking
  - `src/utils/`: Utility functions and helpers
  - `src/data/`: Data definitions and containers
  - `src/scenes/`: Scene implementations
  - `src/ui/`: User interface components
  - `src/shaders/`: GPU shaders and materials
  - `src/ai/`: AI behavior trees and navigation systems
  - `src/accessibility/`: Accessibility features and settings
  - `src/networking/`: Networking and multiplayer components (if relevant)
- **Asset Management**:
  - Store assets in `assets/` directory with appropriate subdirectories
  - Maintain optimized assets in version control
- **Documentation**:
  - Maintain documentation in `docs/` directory
  - Store working documents and planning materials in `workingdocs/` directory
  - Include README files in each major directory explaining its purpose
- **Testing**:
  - Keep tests in `tests/` directory matching src structure

### File Naming
- Use PascalCase for scene files (.tscn) and GDScript class files (.gd)
  - Example: `CharacterCreator.tscn`, `CampaignManager.gd`
- Use snake_case for resource files (.tres, .res)
  - Example: `character_template.tres`, `ship_data.res`
- Use snake_case for test files with _test suffix
  - Example: `character_manager_test.gd`
- Prefix interface files with I
  - Example: `ICharacter.gd`, `ICampaignPhase.gd`
- Suffix enum files with Enums
  - Example: `FiveParsecsGameEnums.gd`, `CombatEnums.gd`

## Coding Standards

### GDScript Style
- Use strict mode (`@tool` and `class_name` declarations) for all GDScript files
- Implement static typing for all variables and functions
  - Example: `func get_character_data(character_id: String) -> CharacterData:`
- Follow consistent naming conventions:
  - snake_case for functions and variables
  - PascalCase for classes and custom types
  - SCREAMING_SNAKE_CASE for constants and enums
- Use enums for type-safe identifiers and category values
  - Store game-specific enums in designated enum classes (e.g., `FiveParsecsGameEnums`)
- Implement proper signal connections using typed callbacks

### Godot 4.4 Type Safety Enhancements
- Use strongly-typed arrays and collections for better type safety:
  ```gdscript
  # Prefer strongly-typed arrays
  var items: Array[Item] = []
  var points: PackedVector2Array = []
  ```
- Implement typesafe Dictionary usage where appropriate:
  ```gdscript
  # For complex dictionaries, create custom resources instead
  var level_data: Dictionary = {"name": "Level 1", "difficulty": 3} # Only for simple cases
  ```
- Utilize new language features properly:
  ```gdscript
  # Lambda functions
  var filtered_items = items.filter(func(item): return item.level > 3)
  
  # Pattern matching with type patterns
  match value:
      var v as String: # Type pattern
          print("String: ", v)
      [var x, var y] if x is int and y is int: # Array pattern with guard
          print("Point: ", x, ", ", y)
  ```

### Async Programming
- Prefer await over callbacks when possible
- Structure functions to return values when using await
- Handle cancellation appropriately in async functions
- Document async behavior clearly in function comments
- Use timeout patterns for async operations that might hang
```gdscript
## Fetches data asynchronously with timeout safety
## @param url: The URL to fetch from
## @param timeout: Maximum time to wait in seconds
## @return: The fetched data or null if timed out
func fetch_data(url: String, timeout: float = 5.0) -> Variant:
    var start_time = Time.get_ticks_msec()
    var http_request = HTTPRequest.new()
    add_child(http_request)
    http_request.request(url)
    
    # Wait for completion with timeout
    while http_request.get_http_client_status() != HTTPClient.STATUS_BODY and \
          (Time.get_ticks_msec() - start_time) < timeout * 1000:
        await get_tree().process_frame
        
    if (Time.get_ticks_msec() - start_time) >= timeout * 1000:
        http_request.queue_free()
        return null
        
    var response = await http_request.request_completed
    http_request.queue_free()
    return response[3]
```

### Documentation
- Document all public functions with GDScript doc comments:
```gdscript
## Updates the character's status based on damage taken
## @param character: The character to update
## @param damage: Amount of damage taken
## @return bool: True if character status changed
func update_character_status(character: Character, damage: int) -> bool:
```
- Document all signals with their purpose and parameters
- Maintain comprehensive README.md files in major directories
- Document all exported variables with descriptive comments
- Include usage examples for complex functions and systems
- Keep API documentation updated as code evolves

### Node Organization
- Use PascalCase for node names in the scene tree
- Organize related nodes under descriptive parent nodes
- Follow a consistent pattern for node references and access
- Document node dependencies and required configurations
- Implement proper scene composition with reusable components
- Minimize deep nesting of nodes when possible
- Use unique_name_in_owner for key nodes that need direct access:
  ```gdscript
  # In scene setup
  $MainCamera.unique_name_in_owner = true
  
  # Accessing from anywhere
  %MainCamera.current = true
  ```

### Scene Instantiation
- Use preload for frequently used scenes
- Implement scene_changed signal handlers
- Document required node structure for scenes
- Follow the ResourcePreloader pattern for complex scene sets
- Utilize SceneTree.create_tween for scene transitions
```gdscript
# Preload scenes
const CharacterScene := preload("res://src/game/character/Character.tscn")

# Instance with type safety
func spawn_character(data: CharacterData) -> Character:
    var character: Character = CharacterScene.instantiate()
    character.initialize(data)
    return character
    
# Scene transitions
func transition_to_scene(next_scene: PackedScene) -> void:
    var tween = create_tween()
    tween.tween_property($FadeOverlay, "modulate:a", 1.0, 0.5)
    await tween.finished
    get_tree().change_scene_to_packed(next_scene)
    tween = create_tween()
    tween.tween_property($FadeOverlay, "modulate:a", 0.0, 0.5)
```

## Game Systems Implementation

### Campaign System
- Follow modular design for campaign phases and progression
- Implement proper state validation for all campaign transitions
- Use the Five Parsecs game enums for categorization and type safety
- Document phase transitions and requirements
- Maintain phase history for player reference and state rollback
- Implement campaign type-specific features using the CampaignType enum

### Character Management
- Use character class types from CharacterClass enum for specialization
- Track character status using the CharacterStatus enum
- Implement proper character progression systems
- Maintain character history and statistics
- Use character validation before state changes
- Support proper character relationship tracking

### Ship Management
- Implement ship types according to ShipType enum
- Track ship upgrades and modifications
- Support ship crew assignments and roles
- Validate ship state changes and modifications
- Implement proper ship resource management

## Resource Management
- Use sub-resources for complex nested data
- Implement custom resources with type-safe properties
- Leverage ResourceLoader.load_threaded for background loading
- Use unique_name_in_owner to reference key nodes
- Implement proper dependency tracking in custom resources
```gdscript
# Custom resource with proper type safety
class_name WeaponData
extends Resource

@export var name: String
@export var damage: int
@export var range_meters: float
@export var ammo_type: AmmoType
@export var effects: Array[StatusEffect] = []

# Background loading
func preload_assets() -> void:
    var loader = ResourceLoader.load_threaded_request("res://assets/models/weapons.glb")
    # Continue game initialization
    while ResourceLoader.load_threaded_get_status(loader) == ResourceLoader.THREAD_LOAD_IN_PROGRESS:
        await get_tree().process_frame
    var weapon_models = ResourceLoader.load_threaded_get(loader)
```

## Testing Requirements

### Test Structure
- Maintain unit tests for all core systems and game logic
- Implement integration tests for complex subsystems
- Create end-to-end tests for critical user workflows
- Use mocks and stubs for external dependencies
- Document test coverage and gaps
- Target 85% overall code coverage with critical paths at 100%

### Signal Testing
- Test signal connection integrity
- Verify signal parameter types
- Implement wait_for_signal patterns in async tests
- Document expected signal emission sequences
- Test signal disconnection to prevent memory leaks
```gdscript
# Signal testing pattern
func test_character_damaged_signal() -> void:
    var character = Character.new()
    add_child(character)
    
    var signal_emitted = false
    var damage_amount = 0
    
    character.damaged.connect(func(amount): 
        signal_emitted = true
        damage_amount = amount
    )
    
    character.take_damage(5)
    
    assert_true(signal_emitted, "damaged signal should be emitted")
    assert_eq(damage_amount, 5, "Signal should pass correct damage amount")
```

### Test Stability
- Implement deterministic test runs with fixed random seeds
- Use proper test setup and teardown processes
- Handle async operations properly with signal-based waiting
- Track and clean up resources to prevent test pollution
- Verify state transitions with assertions
- Implement proper test timeouts and error handling
- Use SceneTree.process_frame for frame-precise testing

## State Management

### Validation Rules
- Validate all state changes through appropriate validators
- Implement error recovery for invalid state transitions
- Document state machine transitions and requirements
- Maintain state history for debugging and rollback functionality
- Log all validation failures with appropriate context
- Ensure state consistency across game systems

### Error Handling
- Implement structured error handling throughout the codebase
- Use error codes and descriptive messages
- Log errors through a centralized logging system
- Implement recovery mechanisms for non-critical errors
- Provide user-friendly error messages for player-facing issues
- Use defensive programming to prevent common errors

## UI/UX Standards

### Component Design
- Design UI components for both desktop and mobile interfaces
- Implement responsive layouts that adapt to screen sizes
- Use consistent styling and theming across all interfaces
- Implement proper focus management for keyboard navigation
- Use appropriate font sizes and contrast ratios for accessibility
- Follow the Five Parsecs aesthetic for all UI elements

### Container and Layout
- Use FlowContainer for adaptive layouts
- Implement proper UI scaling that respects DPI
- Utilize SubViewport for rendering-intensive UI elements
- Implement theme variations for UI component states
- Design with accessibility features from the start
```gdscript
# Responsive container setup
func setup_responsive_container() -> void:
    var container = FlowContainer.new()
    container.vertical = true
    container.add_theme_constant_override("h_separation", 10)
    container.add_theme_constant_override("v_separation", 10)
    
    # Theme variation for different states
    var button = Button.new()
    button.theme_type_variation = "AccentButton"
    container.add_child(button)
```

### Input Management
- Support both mouse/keyboard and touch inputs
- Implement proper input validation and debouncing
- Document input requirements for all interactive elements
- Handle input errors gracefully with feedback
- Implement appropriate touch zones for mobile interfaces
- Support customizable control schemes where appropriate

## Performance Optimization

### Optimization Targets
- Maintain 60 FPS on target platforms
- Optimize resource loading with preloading and background loading
- Implement level of detail systems for complex scenes
- Profile all new features before integration
- Monitor memory usage and implement proper cleanup
- Document performance impacts of major systems

### Memory Management
- Implement proper resource cleanup and garbage collection
- Use object pooling for frequently created/destroyed objects
- Monitor memory usage during development
- Implement reference counting where appropriate
- Optimize asset usage to reduce memory footprint
- Perform regular performance testing on target platforms

### Performance Tools
- Use SceneTree.process_frame for frame-precise testing
- Leverage GPU-based particle systems over CPU
- Monitor VRAM usage with the new rendering profiler
- Implement threading for compute-intensive operations
- Document performance test results in standardized format
```gdscript
# Performance monitoring example
func measure_performance(func_to_test: Callable) -> Dictionary:
    var start_time = Time.get_ticks_usec()
    var start_memory = OS.get_static_memory_usage()
    
    func_to_test.call()
    
    var end_time = Time.get_ticks_usec()
    var end_memory = OS.get_static_memory_usage()
    
    return {
        "execution_time_ms": (end_time - start_time) / 1000.0,
        "memory_usage_kb": (end_memory - start_memory) / 1024.0
    }
```

## Security Standards

### Data Handling
- Validate all user input
- Sanitize file operations
- Use secure storage for sensitive data
- Document security requirements
- Implement access controls
- Follow data protection guidelines

### Error Protection
- Implement proper error boundaries
- Prevent data corruption
- Include data recovery mechanisms
- Document security measures
- Log security events
- Regular security audits

## Release Management

### Version Control
- Use semantic versioning (MAJOR.MINOR.PATCH)
- Maintain a comprehensive CHANGELOG.md
- Tag significant releases in the repository
- Create release branches for major versions
- Document breaking changes and migration steps
- Implement proper feature flags for in-progress work

### Quality Assurance
- Perform code reviews for all significant changes
- Run automated tests before merging
- Implement manual testing for UI and gameplay
- Document known issues and workarounds
- Validate releases against quality criteria
- Gather and incorporate user feedback

## Collaboration Standards

### Commit Guidelines
- Use conventional commits format (type: description)
  - feat: Add new character creation feature
  - fix: Resolve campaign transition issue
  - docs: Update API documentation
  - refactor: Improve combat resolution flow
  - test: Add tests for ship management
- Include issue references in commit messages
- Keep commits focused on single concerns
- Write clear, descriptive commit messages
- Document breaking changes prominently

### Pull Request Process
- Create descriptive pull request titles and descriptions
- Link related issues and documentation
- Include test coverage information
- Request reviews from appropriate team members
- Address all review comments
- Ensure CI passes before merging

## Future Development

### Roadmap Integration
- Align development with project roadmap
- Prioritize features based on player impact
- Document technical debt and refactoring needs
- Plan for scalability and extensibility
- Consider modding support in architecture decisions
- Maintain balance between new features and stability 